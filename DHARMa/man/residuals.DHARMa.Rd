% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DHARMa.R
\name{residuals.DHARMa}
\alias{residuals.DHARMa}
\title{Return residuals of a DHARMa simulation}
\usage{
\method{residuals}{DHARMa}(object, quantileFunction = NULL,
  outlierValues = NULL, ...)
}
\arguments{
\item{object}{an object with simulated residuals created by \link{simulateResiduals}.}

\item{quantileFunction}{optional - a quantile function to transform the uniform 0/1 scaling of DHARMa to another distribution.}

\item{outlierValues}{if a quantile function with infinite support (such as dnorm) is used, residuals that are 0/1 are mapped to -Inf / Inf. outlierValues allows to convert -Inf / Inf values to an optional min / max value.}

\item{...}{optional arguments for compatibility with the generic function, no function implemented.}
}
\description{
Return residuals of a DHARMa simulation
}
\details{
The function accesses the slot $scaledResiduals in a fitted DHARMa object, and optionally transforms the standard DHARMa quantile residuals (which have a uniform distribution) to a particular pdf.
}
\note{
Some of the papers on simulated quantile residuals transforming the residuals (which are natively uniform) back to a normal distribution. I presume this is because of the larger familiarity of most users with normal residuals. Personally, I never considered this desirable, for the reasons explained in https://github.com/florianhartig/DHARMa/issues/39, but with this function, I wanted to give users the option to plot normal residuals if they so wish.
}
\examples{
library(lme4)

testData = createData(sampleSize = 100, overdispersion = 0.5, family = poisson())
fittedModel <- glmer(observedResponse ~ Environment1 + (1|group),
                     family = "poisson", data = testData)

# simulate residuals (default behavior, conditional on the fitted random effects)
simulationOutput <- simulateResiduals(fittedModel = fittedModel)

# simulate residuals unconditional on the fitted random effects (REs are re-simulated)
simulationOutput <- simulateResiduals(fittedModel = fittedModel, simulateREs = "unconditional")

# simulate residuals user-specified using lme4 syntax (e.g. conditional only on a specific RE)
simulationOutput <- simulateResiduals(fittedModel = fittedModel, simulateREs = "user-specified", re.form = ~(1|group))

# standard plot
plot(simulationOutput)

# one of the possible test, for other options see ?testResiduals / vignette
testDispersion(simulationOutput)

# the calculated residuals can be accessed via
residuals(simulationOutput)

# transform residuals to other pdf, see ?residuals.DHARMa for details
residuals(simulationOutput, quantileFunction = qnorm, outlierValues = c(-7,7))

# get residuals that are outside the simulation envelope
outliers(simulationOutput)

# calculating aggregated residuals per group
simulationOutput2 = recalculateResiduals(simulationOutput, group = testData$group)
plot(simulationOutput2, quantreg = FALSE)

# calculating residuals only for subset of the data
simulationOutput3 = recalculateResiduals(simulationOutput, sel = testData$group == 1 )
plot(simulationOutput3, quantreg = FALSE)
}
